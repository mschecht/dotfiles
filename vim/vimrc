" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')
" Great info here: https://realpython.com/vim-and-python-a-match-made-in-heaven/#vundle
" and here: https://www.ostechnix.com/manage-vim-plugins-using-vundle-linux/

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdtree'

" Python stuff
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'

" Powerline
" info: https://powerline.readthedocs.io/en/latest/index.html
" Powerline is not loading correctly... try to fix in the future
" The solution is here: https://github.com/gnachman/iTerm2/commit/8e3ad6dabf83c60b8cf4a3e3327c596401744af6
"Plugin 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

"Plugin 'terryma/vim-multiple-cursors'

" VIM markdown syntax
Plugin 'godlygeek/tabular'

Plugin 'plasticboy/vim-markdown'

" Python autocomplete
Plugin 'davidhalter/jedi-vim'

" Markdown preview
Plugin 'suan/vim-instant-markdown'

" Helps indent with Python Scripts
" Credit: https://github.com/vim-scripts/indentpython.vim
Plugin 'vim-scripts/indentpython.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Adjusting how Vim looks
set number
set relativenumber

" Scroll through Ctrl+n autocomplete with jk
"inoremap pumvisible() ?	"\<C-n>" : "j"
"inoremap pumvisible() ?	"\<C-p>" : "k"

set wildmode=longest,list,full
set wildmenu
set smartindent
set noswapfile
set hidden
set list
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set backspace=2

set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set list

syntax on

set background=dark

" Allow copying to system clipboard
set clipboard=unnamed

" Mouse magic
set mouse=a

" remap NERDTree to ctrl-n
:map <C-n> :NERDTree

" automatically start vim if no file is specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Instant Markdown
" manually start markdown preview in browser
let g:instant_markdown_autostart = 0
:map <C-i> :InstantMarkdownPreview

" Multipule cursors
let g:multi_cursor_use_default_mapping=0

" Default mapping
let g:multi_cursor_start_word_key      = '<C-m>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-m>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
" let g:multi_cursor_quit_key            = '<Esc>'

" plasticboy/vim-markdown disable text folding 
let g:vim_markdown_folding_disabled = 1

"
" Python stuff
"
" Credit: https://realpython.com/vim-and-python-a-match-made-in-heaven/

au BufNewFile,BufRead *.py set syntax=python

" PEP8
"au BufNewFile,BufRead *.py
"    \ set tabstop=4
"    \ set softtabstop=4
"    \ set shiftwidth=4
"    \ set textwidth=79
"    \ set expandtab
"    \ set autoindent
"    \ set fileformat=unix

" SNAKEMAKE syntax highlighting
" Credit: https://snakemake.readthedocs.io/en/stable/project_info/faq.html#how-do-i-enable-syntax-highlighting-in-vim-for-snakefiles
au BufNewFile,BufRead Snakefile set syntax=snakemake
au BufNewFile,BufRead *.smk set syntax=snakemake

"set encoding=utf-8

let python_highlight_all=1

let g:powerline_pycmd = 'py3'


