" adding a leader keyi
map <Space> <Leader>

" vim-plug: Vim plugin manager
" ============================
"
" Download plug.vim and put it in ~/.vim/autoload
"
"   curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" this downloads vim-plug if its missing
if empty(glob("~/.vim/autoload/plug.vim"))
  silent! execute '!curl --create-dirs -fLo ~/.vim/autoload/plug.vim https://raw.github.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * silent! PlugInstall
endif

" declare plugins
silent! if plug#begin()

    Plug	'vim-syntastic/syntastic'
    Plug	'terryma/vim-multiple-cursors'
    Plug	'davidhalter/jedi-vim'
    Plug	'scrooloose/nerdtree'
    Plug	'vim-syntastic/syntastic'
    Plug	'godlygeek/tabular'
    Plug	'airblade/vim-gitgutter'
    Plug	'ctrlpvim/ctrlp.vim'
    Plug	'davidhalter/jedi-vim'
    Plug	'severin-lemaignan/vim-minimap'
    Plug	'ervandew/supertab'
    Plug	'jiangmiao/auto-pairs'
    Plug	'preservim/nerdcommenter'
    Plug	'tomasr/molokai'

  call plug#end()
endif
" ============================


" Adjusting how Vim looks
set number
set relativenumber
set wildmode=longest,list,full
set wildmenu
set smartindent
set noswapfile
set hidden
set list
set tabstop=4
set softtabstop=4
set shiftwidth=4
set smarttab
set backspace=2
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set list
set background=dark
set encoding=utf-8
set term=screen-256color
syntax on

"
" Colors!

"Jedi vim stufs
let g:jedi#show_call_signitures = "" 
let g:jedi#popup_select_first = 0


" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
    let @/ = ''
    if exists('#auto_highlight')
        au! auto_highlight
        augroup! auto_highlight
        setl updatetime=4000
        echo 'Highlight current word: off'
        return 0
    else
        augroup auto_highlight
            au!
            au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
        augroup end
        setl updatetime=500
        echo 'Highlight current word: ON'
        return 1
    endif
endfunction


" Allow copying to system clipboard
set clipboard=unnamed

" Mouse magic
set mouse=a

" remap NERDTree to ctrl-n
:map <C-n> :NERDTree

" automatically start vim if no file is specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Python stuff
" Credit: https://realpython.com/vim-and-python-a-match-made-in-heaven/

au BufNewFile,BufRead *.py set syntax=python

" SNAKEMAKE syntax highlighting
" Credit: https://snakemake.readthedocs.io/en/stable/project_info/faq.html#how-do-i-enable-syntax-highlighting-in-vim-for-snakefiles
au BufNewFile,BufRead Snakefile set syntax=snakemake
au BufNewFile,BufRead *.smk set syntax=snakemake


let python_highlight_all=1

" Automatic reloading of vimrc when you save
autocmd! bufwritepost .vimrc source %

" QUICKLY edit and reload vim WITHIN vim :)
" edit vimrc quickly
nnoremap <leader>ev :split ~/dotfiles/vim/vimrc<cr>

" Reload vimrc configuration file nnoremap <Leader>vr :source $MYVIMRC<CR>
nnoremap <Leader>rv :source $MYVIMRC<cr>

" ctrlp.vim use a custom file listing command:
let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
